{"version":3,"sources":["serviceWorker.js","LocationPoolDisplay.tsx","Settings/Settings.ts","ItemLocations/BossKeyLocationPool.ts","ItemLocations/CompassLocationPool.ts","ItemLocations/CowLocationPool.ts","ItemLocations/DekuScrubLocationPool.ts","ItemLocations/DungeonLocationPool.ts","ItemLocations/GanonsBossKeyLocationPool.ts","ItemLocations/GerudoCardLocationPool.ts","ItemLocations/GoldSkulltulaDungeonLocationPool.ts","ItemLocations/GoldSkulltulaOverworldLocationPool.ts","ItemLocations/LocationPool.ts","ItemLocations/MagicBeanLocationPool.ts","ItemLocations/MapLocationPool.ts","ItemLocations/OcarinaLocationPool.ts","ItemLocations/RutoLetterLocationPool.ts","ItemLocations/ShopLocationPool.ts","ItemLocations/SmallKeyLocationPool.ts","ItemLocations/SongLocationPool.ts","ItemLocations/SwordLocationPool.ts","ItemLocations/WeirdEggLocationPool.ts","ItemPools/BossKeyItemPool.ts","ItemPools/CompassItemPool.ts","ItemPools/GanonsBossKeyItemPool.ts","ItemPools/GerudoCardItemPool.ts","ItemPools/GoldSkulltulaItemPool.ts","ItemPools/MagicBeanItemPool.ts","ItemPools/MapItemPool.ts","ItemPools/OcarinaItemPool.ts","ItemPools/RutoLetterItemPool.ts","ItemPools/SmallKeyItemPool.ts","ItemPools/SongItemPool.ts","ItemPools/SwordItemPool.ts","ItemPools/VanillaItemPool.ts","ItemPools/WeirdEggItemPool.ts","DungeonRewards/DungeonRewardLocationPool.ts","DungeonRewards/DungeonRewardItemPool.ts","PlandoGenerator.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","LocationPoolDisplay","name","availableLocations","locations","items","toggleLocationEnabled","updateLocation","className","length","sort","map","i","locationIsEnabled","undefined","key","onClick","onChange","e","target","value","defaultValue","item","j","Settings","BossKeyLocationPool","CompassLocationPool","CowLocationPool","DekuScrubLocationPool","DungeonLocationPool","GanonsBossKeyLocationPool","GerudoCardLocationPool","GoldSkulltulaDungeonLocationPool","GoldSkulltulaOverworldLocationPool","LocationPool","MagicBeanLocationPool","MapLocationPool","OcarinaLocationPool","RutoLetterLocationPool","ShopLocationPool","SmallKeyLocationPool","SongLocationPool","SwordLocationPool","WeirdEggLocationPool","BossKeyItemPool","CompassItemPool","GanonsBossKeyItemPool","GerudoCardItemPool","GoldSkulltulaItemPool","MagicBeanItemPool","MapItemPool","OcarinaItemPool","RutoLetterItemPool","SmallKeyItemPool","SongItemPool","SwordItemPool","VanillaItemPool","WeirdEggItemPool","DungeonRewardLocationPool","DungeonRewardItemPool","PlandoGenerator","useState","settings","setSettings","setLocations","_locations","overworldLocations","dungeonLocations","gsLocations","shopLocations","dekuScrubLocations","overworldItems","dungeonItems","songItems","gsItems","open_fountain","push","shuffle_kokiri_sword","shuffle_ocarinas","shuffle_weird_egg","shuffle_gerudo_card","shuffle_cows","shuffle_beans","tokensanity","filter","v","a","indexOf","shuffle_mapcompass","shuffle_smallkeys","shuffle_bosskeys","shuffle_ganon_bosskey","shopsanity","shuffle_scrubs","shuffle_song_items","settingsJsx","Object","keys","forEach","options","settingEnabled","option","_settings","toggleSettingEnabled","display","updateSetting","toString","updated","possibleLocations","includes","href","document","createElement","contents","file","Blob","JSON","stringify","type","URL","createObjectURL","download","Date","now","click","revokeObjectURL","style","height","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCC6BSC,MA5Cf,YAO8B,IAN1BC,EAMyB,EANzBA,KACAC,EAKyB,EALzBA,mBACAC,EAIyB,EAJzBA,UACAC,EAGyB,EAHzBA,MACAC,EAEyB,EAFzBA,sBACAC,EACyB,EADzBA,eAGA,OACI,yBAAKC,UAAU,0BACX,wBAAIA,UAAU,aAAaN,GAC3B,yBAAKM,UAAS,oBAAeN,IACxBC,EAAmBM,OAAS,EAC7BN,EAAmBO,OAAOC,KAAI,SAACb,EAAUc,GACrC,IAAIC,OAA4CC,IAAxBV,EAAUN,GAClC,OAAO,yBAAKiB,IAAKH,EAAGJ,UAAU,YAC1B,wBACIQ,QAAS,kBAAMV,EAAsBR,IACrCU,UAAYK,EAAoB,UAAY,YAE3Cf,GAEJe,GAAqB,yBAAKL,UAAU,IACjC,yBAAKA,UAAU,kCACX,4BAAQS,SAAU,SAAAC,GAAC,OAAIX,EAAeT,EAAUoB,EAAEC,OAAOC,QAAQC,aAAcjB,EAAUF,IACpFG,EAAMM,KAAI,SAACW,EAAMC,GACd,OAAO,4BAAQR,IAAKQ,EAAGH,MAAOE,GACzBA,aAS7B,wBAAId,UAAU,aAAd,oBCtCLgB,EAAyB,CAChC,cAAiB,CACb,KAAQ,UACR,QAAW,iBAEf,qBAAwB,CACpB,KAAQ,UACR,QAAW,wBAEf,iBAAoB,CAChB,KAAQ,UACR,QAAW,oBAEf,kBAAqB,CACjB,KAAQ,UACR,QAAW,qBAEf,oBAAuB,CACnB,KAAQ,UACR,QAAW,uBAEf,mBAAsB,CAClB,KAAQ,UACR,QAAW,iBAEf,aAAgB,CACZ,KAAQ,UACR,QAAW,gBAEf,cAAiB,CACb,KAAQ,UACR,QAAW,iBAEf,eAAkB,CACd,KAAQ,SACR,QAAW,cACX,QAAW,CACP,MACA,MACA,UACA,WAGR,WAAc,CACV,KAAQ,SACR,QAAW,aACX,QAAW,CACP,MACA,IACA,IACA,IACA,IACA,IACA,WAGR,YAAe,CACX,KAAQ,SACR,QAAW,cACX,QAAW,CACP,MACA,WACA,YACA,QAGR,mBAAsB,CAClB,KAAQ,SACR,QAAW,yBACX,QAAW,CACP,SACA,YACA,UACA,UACA,cAGR,kBAAqB,CACjB,KAAQ,SACR,QAAW,qBACX,QAAW,CACP,SACA,UACA,UACA,cAGR,iBAAoB,CAChB,KAAQ,SACR,QAAW,oBACX,QAAW,CACP,SACA,UACA,UACA,cAGR,sBAAyB,CACrB,KAAQ,SACR,QAAW,0BACX,QAAW,CACP,SACA,UACA,UACA,YACA,eACA,kBACA,cACA,kBAGR,oBAAuB,CACnB,KAAQ,UACR,QAAW,6BAEf,cAAiB,CACb,KAAQ,UACR,QAAW,iBAEf,MAAS,CACL,KAAQ,SACR,QAAW,gBACX,QAAW,CACP,OACA,OACA,QACA,WAGR,UAAa,CACT,KAAQ,SACR,QAAW,oBACX,QAAW,CACP,UACA,WACA,SACA,cACA,eAGR,gBAAmB,CACf,KAAQ,SACR,QAAW,yBACX,QAAW,CACP,YACA,WACA,SACA,YAGR,kBAAqB,CACjB,KAAQ,SACR,QAAW,oBACX,QAAW,CACP,OACA,SACA,SACA,YACA,SAGR,aAAgB,CACZ,KAAQ,SACR,QAAW,uBACX,QAAW,CACP,UACA,SACA,UACA,UACA,OACA,YACA,SACA,UACA,WACA,kBAGR,aAAgB,CACZ,KAAQ,SACR,QAAW,eACX,QAAW,CACP,QACA,QACA,YCvLDC,G,KAAwC,CAC/C,6BACA,+BACA,+BACA,+BACA,gCCLOC,EAAwC,CAC/C,wCACA,0BACA,gCACA,4BACA,+BACA,2BACA,iCACA,8BACA,8BACA,8BCVOC,EAAoC,CAC3C,kBACA,oBACA,kBACA,uBACA,wBACA,qBACA,sBACA,gBACA,kBCTOC,EAA0C,CACjD,0BACA,4BACA,8BACA,mCACA,qCACA,kCACA,8BACA,+BACA,oCACA,gCACA,iCACA,uBACA,kCACA,8BACA,+BACA,kCACA,oCACA,iCACA,6BACA,8BACA,sCACA,wCACA,sCACA,wCACA,4BACA,4BACA,2BACA,0BACA,4BACA,sBACA,uBACA,2BACA,8BCjCOC,EAAwC,CAC/C,oCACA,2BACA,4BACA,sCACA,oBACA,uCACA,iCACA,sCACA,2BACA,qBACA,kBACA,iBACA,uCACA,mCACA,iCACA,0BACA,gCACA,sBACA,2CACA,wCACA,wCACA,iCACA,qCACA,4CACA,2CACA,iCACA,wCACA,gCACA,iBACA,8BACA,mCACA,8BACA,8BACA,eACA,+BACA,kCACA,+CACA,iDACA,2CACA,4CACA,uCACA,gCACA,uCACA,uCACA,oBACA,2CACA,4CACA,gDACA,iDACA,gDACA,gDACA,mDACA,gDACA,kDACA,mDACA,kDACA,mDACA,mDACA,iCACA,uCACA,wCACA,yCACA,wCACA,mCACA,yBACA,sBACA,6CACA,8CACA,8BACA,iBACA,mCACA,uCACA,wCACA,yCACA,0CACA,yCACA,0CACA,6CACA,8CACA,6CACA,8CACA,+CACA,+CCnFOC,EAA8C,CACrD,+BCDOC,EAA2C,CAClD,mCCDOC,EAAqD,CAC5D,4BACA,8BACA,6BACA,kCACA,qCACA,gCACA,yCACA,0CACA,gCACA,iCACA,oCACA,oCACA,yBACA,8BACA,yBACA,gCACA,gCACA,4BACA,0BACA,0BACA,yBACA,0BACA,mCACA,oCACA,kCACA,gCACA,qCACA,iCACA,gCACA,iCACA,sCACA,+BACA,gCACA,wCACA,kCACA,gCACA,oCACA,6BACA,oCACA,+BACA,uCACA,gCACA,6CACA,0BC5COC,EAAuD,CAC9D,8BACA,uBACA,2BACA,uCACA,4BACA,sCACA,0BACA,2BACA,yBACA,6BACA,2BACA,0BACA,gCACA,8BACA,+BACA,0BACA,mCACA,+BACA,qBACA,gCACA,0BACA,0BACA,wBACA,4BACA,+BACA,uCACA,8BACA,4BACA,mBACA,yBACA,iCACA,oBACA,0BACA,+BACA,gCACA,2CACA,mCACA,6BACA,gCACA,iCACA,gCACA,qBACA,uBACA,oCACA,6BACA,oCACA,0BACA,mCACA,iCACA,wBACA,6BACA,gCACA,6BACA,qCACA,gCACA,2BCxDOC,EAAiC,CACxC,sBACA,uBACA,yBACA,0BACA,YACA,sBACA,kBACA,mCACA,iBACA,8BACA,oBACA,gBACA,gBACA,2CACA,uCACA,mCACA,gCACA,gCACA,gCACA,qCACA,qCACA,qCACA,qCACA,oCACA,4BACA,+BACA,6BACA,6BACA,cACA,yBACA,2BACA,iCACA,sBACA,WACA,gBACA,iBACA,cACA,2BACA,2BACA,2BACA,2BACA,2BACA,8BACA,4BACA,yBACA,6BACA,oBACA,qBACA,0BACA,uBACA,iBACA,8BACA,gCACA,4BACA,WACA,iCACA,6BACA,8BACA,kCACA,yBACA,iBACA,eACA,kCACA,qCACA,sBACA,+BACA,oBACA,oBACA,oCACA,oCACA,kBACA,yBACA,mBACA,0CACA,yCACA,8BACA,kBACA,iCACA,oCACA,kCACA,0BACA,6BACA,wCACA,sBACA,+BACA,6CACA,sCACA,sCACA,kCACA,sBACA,6BACA,+BACA,6BACA,wCC9FOC,EAA0C,CACjD,uBCDOC,EAAoC,CAC3C,oCACA,wBACA,4BACA,wBACA,0BACA,uBACA,6BACA,0BACA,0BACA,0BCVOC,EAAwC,CAC/C,kBACA,mBCFOC,EAA2C,CAClD,qBCDOC,EAAqC,CAC5C,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,iCACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBChEOC,EAAyC,CAChD,4BACA,mCACA,2BACA,kCACA,8BACA,4CACA,8CACA,sCACA,8BACA,uCACA,2CACA,uCACA,uCACA,qCACA,wCACA,kCACA,6BACA,wCACA,kCACA,4BACA,oCACA,2BACA,yCACA,2CACA,iCACA,wCACA,yCACA,wCACA,uCACA,+CACA,2CACA,wDACA,mDACA,2CACA,+CACA,kDACA,kCACA,wCACA,qCACA,kCACA,sCACA,oDACA,2CC3COC,EAAqC,CAC5C,kBACA,oBACA,4BACA,oBACA,kBACA,iBACA,oBACA,mBACA,2BACA,kBACA,kBACA,uBCZOC,EAAsC,CAC7C,sBCDOC,EAAyC,CAChD,aCDOC,EAAgC,CACvC,yBACA,2BACA,2BACA,2BACA,2BCLOC,EAAgC,CACvC,+BACA,sBACA,4BACA,wBACA,0BACA,uBACA,6BACA,0BACA,0BACA,0BCVOC,EAAsC,CAC7C,4BCDOC,EAAmC,CAC1C,0BCDOC,EAAsC,CAC7C,wBCDOC,EAAkC,CACzC,mBCDOC,EAA4B,CACnC,2BACA,kBACA,wBACA,oBACA,sBACA,mBACA,yBACA,sBACA,sBACA,sBCVOC,EAAgC,CACvC,WCDOC,EAAmC,CAC1C,sBCDOC,EAAiC,CACxC,iCACA,0BACA,4BACA,4BACA,8BACA,sCACA,4BACA,4BACA,4BCTOC,EAA6B,CACpC,iBACA,cACA,mBACA,qBACA,mBACA,oBACA,cACA,oBACA,iBACA,eACA,YACA,kBCZOC,EAA8B,CACrC,gBCDOC,EAAgC,CACvC,cACA,cACA,aACA,iBACA,WACA,WACA,gBACA,gBACA,eACA,aACA,aACA,YACA,YACA,SACA,yBACA,0BACA,oBACA,mBACA,wBACA,mBACA,sBACA,2BACA,mBACA,kBACA,MACA,eACA,kBACA,kBACA,kBACA,gBACA,kBACA,mBACA,mBACA,kBACA,iBACA,iBACA,qBACA,qBACA,iBACA,oBACA,mBACA,sBACA,kBACA,qBACA,qBACA,WACA,kBACA,mBACA,YACA,oBACA,UACA,sBACA,sBACA,sBACA,iBACA,cACA,SACA,oBACA,iBACA,gBACA,kBACA,cACA,iBACA,sBACA,YACA,iBACA,eACA,WACA,eACA,cACA,cACA,SACA,kBACA,cACA,gBACA,aACA,WACA,aACA,gBACA,eACA,cACA,gBACA,cACA,eACA,aACA,uCACA,iBACA,eACA,eACA,aACA,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","file":"static/js/main.970610fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LocationPoolDisplayProps } from \"./Props/LocationPoolDisplayProps\";\nimport React from \"react\";\n\nfunction LocationPoolDisplay({\n    name,\n    availableLocations,\n    locations,\n    items,\n    toggleLocationEnabled,\n    updateLocation\n}: LocationPoolDisplayProps) {\n\n    return (\n        <div className=\"locations-pool-display\">\n            <h3 className=\"is-size-3\">{name}</h3>\n            <div className={`locations ${name}`}>\n                {availableLocations.length > 0 ?\n                availableLocations.sort().map((location, i) => {\n                    let locationIsEnabled = locations[location] !== undefined;\n                    return <div key={i} className=\"location\">\n                        <h5\n                            onClick={() => toggleLocationEnabled(location)}\n                            className={(locationIsEnabled ? \"enabled\" : \"disabled\")}\n                        >\n                            {location}\n                        </h5>\n                        {locationIsEnabled && <div className=\"\">\n                            <div className=\"select is-small setting-select\">\n                                <select onChange={e => updateLocation(location, e.target.value)} defaultValue={locations[name]}>\n                                    {items.map((item, j) => {\n                                        return <option key={j} value={item}>\n                                            {item}\n                                        </option>\n                                    })}\n                                </select>\n                            </div>\n                        </div>}\n                    </div>\n                })\n                :\n                <h5 className=\"is-size-5\">Not Available</h5>\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default LocationPoolDisplay;\n","import { SettingsType } from \"../Types/SettingsType\";\n\nexport let Settings: SettingsType = {\n    \"open_fountain\": {\n        \"type\": \"boolean\",\n        \"display\": \"Open Fountain\"\n    },\n    \"shuffle_kokiri_sword\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Kokiri Sword\"\n    },\n    \"shuffle_ocarinas\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Ocarinas\"\n    },\n    \"shuffle_weird_egg\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Weird Egg\"\n    },\n    \"shuffle_gerudo_card\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Gerudo Card\"\n    },\n    \"shuffle_song_items\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Songs\"\n    },\n    \"shuffle_cows\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Cows\"\n    },\n    \"shuffle_beans\": {\n        \"type\": \"boolean\",\n        \"display\": \"Shuffle Beans\"\n    },\n    \"shuffle_scrubs\": {\n        \"type\": \"select\",\n        \"display\": \"Scrubsanity\",\n        \"options\": [\n            \"off\",\n            \"low\",\n            \"regular\",\n            \"random\"\n        ]\n    },\n    \"shopsanity\": {\n        \"type\": \"select\",\n        \"display\": \"Shopsanity\",\n        \"options\": [\n            \"off\",\n            \"0\",\n            \"1\",\n            \"2\",\n            \"3\",\n            \"4\",\n            \"random\"\n        ]\n    },\n    \"tokensanity\": {\n        \"type\": \"select\",\n        \"display\": \"Tokensanity\",\n        \"options\": [\n            \"off\",\n            \"dungeons\",\n            \"overworld\",\n            \"all\"\n        ]\n    },\n    \"shuffle_mapcompass\": {\n        \"type\": \"select\",\n        \"display\": \"Shuffle Maps/Compasses\",\n        \"options\": [\n            \"remove\",\n            \"startwith\",\n            \"vanilla\",\n            \"dungeon\",\n            \"keysanity\"\n        ]\n    },\n    \"shuffle_smallkeys\": {\n        \"type\": \"select\",\n        \"display\": \"Shuffle Small Keys\",\n        \"options\": [\n            \"remove\",\n            \"vanilla\",\n            \"dungeon\",\n            \"keysanity\"\n        ]\n    },\n    \"shuffle_bosskeys\": {\n        \"type\": \"select\",\n        \"display\": \"Shuffle Boss Keys\",\n        \"options\": [\n            \"remove\",\n            \"vanilla\",\n            \"dungeon\",\n            \"keysanity\"\n        ]\n    },\n    \"shuffle_ganon_bosskey\": {\n        \"type\": \"select\",\n        \"display\": \"Shuffle Ganons Boss Key\",\n        \"options\": [\n            \"remove\",\n            \"vanilla\",\n            \"dungeon\",\n            \"keysanity\",\n            \"lacs_vanilla\",\n            \"lacs_medallions\",\n            \"lacs_stones\",\n            \"lacs_dungeons\"\n        ]\n    },\n    \"correct_chest_sizes\": {\n        \"type\": \"boolean\",\n        \"display\": \"Chest Size Match Contents\"\n    },\n    \"clearer_hints\": {\n        \"type\": \"boolean\",\n        \"display\": \"Clearer Hints\",\n    },\n    \"hints\": {\n        \"type\": \"select\",\n        \"display\": \"Hints Require\",\n        \"options\": [\n            \"none\",\n            \"mask\",\n            \"agony\",\n            \"always\"\n        ]\n    },\n    \"hint_dist\": {\n        \"type\": \"select\",\n        \"display\": \"Hint Distribution\",\n        \"options\": [\n            \"useless\",\n            \"balanced\",\n            \"strong\",\n            \"very_strong\",\n            \"tournament\"\n        ]\n    },\n    \"item_pool_value\": {\n        \"type\": \"select\",\n        \"display\": \"Item Pool Distribution\",\n        \"options\": [\n            \"plentiful\",\n            \"balanced\",\n            \"scarce\",\n            \"minimal\"\n        ]\n    },\n    \"damage_multiplier\": {\n        \"type\": \"select\",\n        \"display\": \"Damage Multiplier\",\n        \"options\": [\n            \"half\",\n            \"normal\",\n            \"double\",\n            \"quadruple\",\n            \"ohko\"\n        ]\n    },\n    \"starting_tod\": {\n        \"type\": \"select\",\n        \"display\": \"Starting Time of Day\",\n        \"options\": [\n            \"default\",\n            \"random\",\n            \"sunrise\",\n            \"morning\",\n            \"noon\",\n            \"afternoon\",\n            \"sunset\",\n            \"evening\",\n            \"midnight\",\n            \"witching-hour\"\n        ]\n    },\n    \"starting_age\": {\n        \"type\": \"select\",\n        \"display\": \"Starting Age\",\n        \"options\": [\n            \"child\",\n            \"adult\",\n            \"random\"\n        ]\n    }\n}\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let BossKeyLocationPool: LocationPoolType = [\n    \"Fire Temple Boss Key Chest\",\n    \"Forest Temple Boss Key Chest\",\n    \"Shadow Temple Boss Key Chest\",\n    \"Spirit Temple Boss Key Chest\",\n    \"Water Temple Boss Key Chest\",\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let CompassLocationPool: LocationPoolType = [\n    \"Bottom of the Well Center Large Chest\",\n    \"Deku Tree Compass Chest\",\n    \"Dodongos Cavern Compass Chest\",\n    \"Fire Temple Compass Chest\",\n    \"Forest Temple Blue Poe Chest\",\n    \"Ice Cavern Compass Chest\",\n    \"Jabu Jabus Belly Compass Chest\",\n    \"Shadow Temple Compass Chest\",\n    \"Spirit Temple Compass Chest\",\n    \"Water Temple Compass Chest\",\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let CowLocationPool: LocationPoolType = [\n    \"Links House Cow\",\n    \"Gerudo Valley Cow\",\n    \"Impas House Cow\",\n    \"LLR Stables Left Cow\",\n    \"LLR Stables Right Cow\",\n    \"LLR Tower Left Cow\",\n    \"LLR Tower Right Cow\",\n    \"HF Grotto Cow\",\n    \"DMT Grotto Cow\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let DekuScrubLocationPool: LocationPoolType = [\n    \"LW Deku Scrub Deku Nuts\",\n    \"LW Deku Scrub Deku Sticks\",\n    \"LW Grotto Deku Scrub Arrows\",\n    \"SFM Grotto Deku Scrub Red Potion\",\n    \"SFM Grotto Deku Scrub Green Potion\",\n    \"LLR Grotto Deku Scrub Deku Nuts\",\n    \"LLR Grotto Deku Scrub Bombs\",\n    \"LLR Grotto Deku Scrub Arrows\",\n    \"Goron Grotto Deku Scrub Deku Nuts\",\n    \"Goron Grotto Deku Scrub Bombs\",\n    \"Goron Grotto Deku Scrub Arrows\",\n    \"DMC Deku Scrub Bombs\",\n    \"DMC Grotto Deku Scrub Deku Nuts\",\n    \"DMC Grotto Deku Scrub Bombs\",\n    \"DMC Grotto Deku Scrub Arrows\",\n    \"ZR Grotto Deku Scrub Red Potion\",\n    \"ZR Grotto Deku Scrub Green Potion\",\n    \"LH Grotto Deku Scrub Deku Nuts\",\n    \"LH Grotto Deku Scrub Bombs\",\n    \"LH Grotto Deku Scrub Arrows\",\n    \"Desert Grotto Deku Scrub Red Potion\",\n    \"Desert Grotto Deku Scrub Green Potion\",\n    \"Valley Grotto Deku Scrub Red Potion\",\n    \"Valley Grotto Deku Scrub Green Potion\",\n    \"DC Deku Scrub Deku Sticks\",\n    \"DC Deku Scrub Deku Shield\",\n    \"DC Deku Scrub Deku Seeds\",\n    \"DC Deku Scrub Deku Nuts\",\n    \"Jabu Deku Scrub Deku Nuts\",\n    \"GC Deku Scrub Bombs\",\n    \"GC Deku Scrub Arrows\",\n    \"GC Deku Scrub Red Potion\",\n    \"GC Deku Scrub Green Potion\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let DungeonLocationPool: LocationPoolType = [\n    \"Deku Tree Compass Room Side Chest\",\n    \"Deku Tree Basement Chest\",\n    \"Deku Tree Slingshot Chest\",\n    \"Deku Tree Slingshot Room Side Chest\",\n    \"Queen Gohma Heart\",\n    \"Dodongos Cavern Bomb Flower Platform\",\n    \"Dodongos Cavern Bomb Bag Chest\",\n    \"Dodongos Cavern End of Bridge Chest\",\n    \"Chest Above King Dodongo\",\n    \"King Dodongo Heart\",\n    \"Boomerang Chest\",\n    \"Barinade Heart\",\n    \"Forest Temple Outside Hookshot Chest\",\n    \"Forest Temple Falling Room Chest\",\n    \"Forest Temple Block Push Chest\",\n    \"Forest Temple Bow Chest\",\n    \"Forest Temple Near Boss Chest\",\n    \"Phantom Ganon Heart\",\n    \"Bottom of the Well Front Center Bombable\",\n    \"Bottom of the Well Center Small Chest\",\n    \"Bottom of the Well Back Left Bombable\",\n    \"Bottom of the Well Defeat Boss\",\n    \"Bottom of the Well Invisible Chest\",\n    \"Bottom of the Well Underwater Front Chest\",\n    \"Bottom of the Well Underwater Left Chest\",\n    \"Bottom of the Well Locked Pits\",\n    \"Bottom of the Well Behind Right Grate\",\n    \"Fire Temple Fire Dancer Chest\",\n    \"Volvagia Heart\",\n    \"Fire Temple Scarecrow Chest\",\n    \"Fire Temple Megaton Hammer Chest\",\n    \"Ice Cavern Iron Boots Chest\",\n    \"Ice Cavern Freestanding PoH\",\n    \"Morpha Heart\",\n    \"Water Temple Dark Link Chest\",\n    \"Shadow Temple Hover Boots Chest\",\n    \"Shadow Temple Invisible Blades Visible Chest\",\n    \"Shadow Temple Invisible Blades Invisible Chest\",\n    \"Shadow Temple Falling Spikes Lower Chest\",\n    \"Shadow Temple Falling Spikes Switch Chest\",\n    \"Shadow Temple Invisible Spikes Chest\",\n    \"Shadow Temple Wind Hint Chest\",\n    \"Shadow Temple After Wind Enemy Chest\",\n    \"Shadow Temple Spike Walls Left Chest\",\n    \"Bongo Bongo Heart\",\n    \"Gerudo Training Grounds Lobby Left Chest\",\n    \"Gerudo Training Grounds Lobby Right Chest\",\n    \"Gerudo Training Grounds Maze Path First Chest\",\n    \"Gerudo Training Grounds Maze Path Second Chest\",\n    \"Gerudo Training Grounds Maze Path Third Chest\",\n    \"Gerudo Training Grounds Maze Path Final Chest\",\n    \"Gerudo Training Grounds Maze Right Central Chest\",\n    \"Gerudo Training Grounds Maze Right Side Chest\",\n    \"Gerudo Training Grounds Hammer Room Clear Chest\",\n    \"Gerudo Training Grounds Before Heavy Block Chest\",\n    \"Gerudo Training Grounds Heavy Block First Chest\",\n    \"Gerudo Training Grounds Heavy Block Second Chest\",\n    \"Gerudo Training Grounds Heavy Block Fourth Chest\",\n    \"Spirit Temple Child Left Chest\",\n    \"Spirit Temple Child Climb East Chest\",\n    \"Spirit Temple Child Climb North Chest\",\n    \"Spirit Temple First Mirror Right Chest\",\n    \"Spirit Temple First Mirror Left Chest\",\n    \"Spirit Temple NE Main Room Chest\",\n    \"Silver Gauntlets Chest\",\n    \"Mirror Shield Chest\",\n    \"Spirit Temple Hallway Left Invisible Chest\",\n    \"Spirit Temple Hallway Right Invisible Chest\",\n    \"Spirit Temple Topmost Chest\",\n    \"Twinrova Heart\",\n    \"Ganons Castle Forest Trial Chest\",\n    \"Ganons Castle Water Trial Left Chest\",\n    \"Ganons Castle Water Trial Right Chest\",\n    \"Ganons Castle Shadow Trial First Chest\",\n    \"Ganons Castle Shadow Trial Second Chest\",\n    \"Ganons Castle Spirit Trial First Chest\",\n    \"Ganons Castle Spirit Trial Second Chest\",\n    \"Ganons Castle Light Trial First Left Chest\",\n    \"Ganons Castle Light Trial Second Left Chest\",\n    \"Ganons Castle Light Trial Third Left Chest\",\n    \"Ganons Castle Light Trial First Right Chest\",\n    \"Ganons Castle Light Trial Second Right Chest\",\n    \"Ganons Castle Light Trial Third Right Chest\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let GanonsBossKeyLocationPool: LocationPoolType = [\n    \"Ganons Tower Boss Key Chest\"\n];\n","import {LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let GerudoCardLocationPool: LocationPoolType = [\n    \"Gerudo Fortress Membership Card\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let GoldSkulltulaDungeonLocationPool: LocationPoolType = [\n    \"GS Deku Tree Compass Room\",\n    \"GS Deku Tree Basement Vines\",\n    \"GS Deku Tree Basement Gate\",\n    \"GS Deku Tree Basement Back Room\",\n    \"GS Dodongo's Cavern East Side Room\",\n    \"GS Dodongo's Cavern Scarecrow\",\n    \"GS Dodongo's Cavern Vines Above Stairs\",\n    \"GS Dodongo's Cavern Alcove Above Stairs\",\n    \"GS Dodongo's Cavern Back Room\",\n    \"GS Jabu Jabu Water Switch Room\",\n    \"GS Jabu Jabu Lobby Basement Lower\",\n    \"GS Jabu Jabu Lobby Basement Upper\",\n    \"GS Jabu Jabu Near Boss\",\n    \"GS Forest Temple First Room\",\n    \"GS Forest Temple Lobby\",\n    \"GS Forest Temple Outdoor West\",\n    \"GS Forest Temple Outdoor East\",\n    \"GS Forest Temple Basement\",\n    \"GS Well West Inner Room\",\n    \"GS Well East Inner Room\",\n    \"GS Well Like Like Cage\",\n    \"GS Fire Temple Basement\",\n    \"GS Fire Temple Song of Time Room\",\n    \"GS Fire Temple Unmarked Bomb Wall\",\n    \"GS Fire Temple East Tower Climb\",\n    \"GS Fire Temple East Tower Top\",\n    \"GS Ice Cavern Spinning Scythe Room\",\n    \"GS Ice Cavern Heart Piece Room\",\n    \"GS Ice Cavern Push Block Room\",\n    \"GS Water Temple South Basement\",\n    \"GS Water Temple Near Boss Key Chest\",\n    \"GS Water Temple Central Room\",\n    \"GS Water Temple Serpent River\",\n    \"GS Water Temple Falling Platform Room\",\n    \"GS Shadow Temple Like Like Room\",\n    \"GS Shadow Temple Crusher Room\",\n    \"GS Shadow Temple Single Giant Pot\",\n    \"GS Shadow Temple Near Ship\",\n    \"GS Shadow Temple Triple Giant Pot\",\n    \"GS Spirit Temple Metal Fence\",\n    \"GS Spirit Temple Bomb for Light Room\",\n    \"GS Spirit Temple Boulder Room\",\n    \"GS Spirit Temple Hall to West Iron Knuckle\",\n    \"GS Spirit Temple Lobby\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let GoldSkulltulaOverworldLocationPool: LocationPoolType = [\n    \"GS Kokiri Know It All House\",\n    \"GS Kokiri Bean Patch\",\n    \"GS Kokiri House of Twins\",\n    \"GS Lost Woods Bean Patch Near Bridge\",\n    \"GS Lost Woods Above Stage\",\n    \"GS Lost Woods Bean Patch Near Stage\",\n    \"GS Sacred Forest Meadow\",\n    \"GS Lake Hylia Bean Patch\",\n    \"GS Lake Hylia Lab Wall\",\n    \"GS Lake Hylia Small Island\",\n    \"GS Lake Hylia Giant Tree\",\n    \"GS Lab Underwater Crate\",\n    \"GS Gerudo Valley Small Bridge\",\n    \"GS Gerudo Valley Bean Patch\",\n    \"GS Gerudo Valley Behind Tent\",\n    \"GS Gerudo Valley Pillar\",\n    \"GS Gerudo Fortress Archery Range\",\n    \"GS Gerudo Fortress Top Floor\",\n    \"GS Wasteland Ruins\",\n    \"GS Desert Colossus Bean Patch\",\n    \"GS Desert Colossus Tree\",\n    \"GS Desert Colossus Hill\",\n    \"GS Hyrule Castle Tree\",\n    \"GS Outside Ganon's Castle\",\n    \"GS Castle Market Guard House\",\n    \"GS Kakariko House Under Construction\",\n    \"GS Kakariko Skulltula House\",\n    \"GS Kakariko Guard's House\",\n    \"GS Kakariko Tree\",\n    \"GS Kakariko Watchtower\",\n    \"GS Kakariko Above Impa's House\",\n    \"GS Graveyard Wall\",\n    \"GS Graveyard Bean Patch\",\n    \"GS Mountain Trail Bean Patch\",\n    \"GS Mountain Trail Bomb Alcove\",\n    \"GS Mountain Trail Above Dodongo's Cavern\",\n    \"GS Mountain Trail Path to Crater\",\n    \"GS Goron City Boulder Maze\",\n    \"GS Goron City Center Platform\",\n    \"GS Death Mountain Crater Crate\",\n    \"GS Mountain Crater Bean Patch\",\n    \"GS Zora River Tree\",\n    \"GS Zora River Ladder\",\n    \"GS Zora River Near Raised Grottos\",\n    \"GS Zora River Above Bridge\",\n    \"GS Zora's Domain Frozen Waterfall\",\n    \"GS Zora's Fountain Tree\",\n    \"GS Zora's Fountain Above the Log\",\n    \"GS Zora's Fountain Hidden Cave\",\n    \"GS Lon Lon Ranch Tree\",\n    \"GS Lon Lon Ranch Rain Shed\",\n    \"GS Lon Lon Ranch House Window\",\n    \"GS Lon Lon Ranch Back Wall\",\n    \"GS Hyrule Field Near Gerudo Valley\",\n    \"GS Hyrule Field near Kakariko\",\n    \"GS Hyrule Castle Grotto\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let LocationPool: LocationPoolType = [\n    \"Mido Chest Top Left\",\n    \"Mido Chest Top Right\",\n    \"Mido Chest Bottom Left\",\n    \"Mido Chest Bottom Right\",\n    \"Skull Kid\",\n    \"Ocarina Memory Game\",\n    \"Target in Woods\",\n    \"LW Deku Scrub Deku Stick Upgrade\", // vanilla deku scrub\n    \"Lake Hylia Sun\",\n    \"Lake Hylia Freestanding PoH\",\n    \"Diving in the Lab\",\n    \"Child Fishing\",\n    \"Adult Fishing\",\n    \"Gerudo Valley Waterfall Freestanding PoH\",\n    \"Gerudo Valley Crate Freestanding PoH\",\n    \"Gerudo Valley Hammer Rocks Chest\",\n    \"Gerudo Fortress Rooftop Chest\",\n    \"Horseback Archery 1000 Points\",\n    \"Horseback Archery 1500 Points\",\n    \"Gerudo Fortress North F1 Carpenter\",\n    \"Gerudo Fortress North F2 Carpenter\",\n    \"Gerudo Fortress South F1 Carpenter\",\n    \"Gerudo Fortress South F2 Carpenter\",\n    \"Haunted Wasteland Structure Chest\",\n    \"Colossus Freestanding PoH\",\n    \"Desert Colossus Fairy Reward\",\n    \"Hyrule Castle Fairy Reward\",\n    \"Ganons Castle Fairy Reward\",\n    \"10 Big Poes\",\n    \"Child Shooting Gallery\",\n    \"Bombchu Bowling Bomb Bag\",\n    \"Bombchu Bowling Piece of Heart\",\n    \"Treasure Chest Game\",\n    \"Dog Lady\",\n    \"Anju as Adult\",\n    \"Anjus Chickens\",\n    \"Man on Roof\",\n    \"10 Gold Skulltula Reward\",\n    \"20 Gold Skulltula Reward\",\n    \"30 Gold Skulltula Reward\",\n    \"40 Gold Skulltula Reward\",\n    \"50 Gold Skulltula Reward\",\n    \"Impa House Freestanding PoH\",\n    \"Windmill Freestanding PoH\",\n    \"Adult Shooting Gallery\",\n    \"Graveyard Freestanding PoH\",\n    \"Gravedigging Tour\",\n    \"Shield Grave Chest\",\n    \"Heart Piece Grave Chest\",\n    \"Composer Grave Chest\",\n    \"Hookshot Chest\",\n    \"Dampe Race Freestanding PoH\",\n    \"Death Mountain Bombable Chest\",\n    \"DM Trail Freestanding PoH\",\n    \"Biggoron\",\n    \"Goron City Leftmost Maze Chest\",\n    \"Goron City Left Maze Chest\",\n    \"Goron City Right Maze Chest\",\n    \"Goron City Pot Freestanding PoH\",\n    \"Rolling Goron as Child\",\n    \"Link the Goron\",\n    \"Darunias Joy\",\n    \"DM Crater Wall Freestanding PoH\",\n    \"DM Crater Volcano Freestanding PoH\",\n    \"Crater Fairy Reward\",\n    \"Mountain Summit Fairy Reward\",\n    \"Frog Ocarina Game\",\n    \"Frogs in the Rain\",\n    \"Zora River Lower Freestanding PoH\",\n    \"Zora River Upper Freestanding PoH\",\n    \"Diving Minigame\",\n    \"Zoras Domain Torch Run\",\n    \"King Zora Thawed\",\n    \"Zoras Fountain Iceberg Freestanding PoH\",\n    \"Zoras Fountain Bottom Freestanding PoH\",\n    \"Zoras Fountain Fairy Reward\",\n    \"Talons Chickens\",\n    \"Lon Lon Tower Freestanding PoH\",\n    \"Kokiri Forest Storms Grotto Chest\",\n    \"Lost Woods Generic Grotto Chest\",\n    \"Deku Theater Skull Mask\",\n    \"Deku Theater Mask of Truth\",\n    \"LW Grotto Deku Scrub Deku Nut Upgrade\", // vanilla deku scrub\n    \"Wolfos Grotto Chest\",\n    \"Remote Southern Grotto Chest\",\n    \"Field Near Lake Outside Fence Grotto Chest\",\n    \"HF Grotto Deku Scrub Piece of Heart\", // vanilla deku scrub\n    \"Field West Castle Town Grotto Chest\",\n    \"Tektite Grotto Freestanding PoH\",\n    \"Redead Grotto Chest\",\n    \"Kakariko Back Grotto Chest\",\n    \"Mountain Storms Grotto Chest\",\n    \"Top of Crater Grotto Chest\",\n    \"Zora River Plateau Open Grotto Chest\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let MagicBeanLocationPool: LocationPoolType = [\n    \"Magic Bean Salesman\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let MapLocationPool: LocationPoolType = [\n    \"Bottom of the Well Basement Chest\",\n    \"Deku Tree Lobby Chest\",\n    \"Dodongos Cavern Map Chest\",\n    \"Fire Temple Map Chest\",\n    \"Forest Temple Map Chest\",\n    \"Ice Cavern Map Chest\",\n    \"Jabu Jabus Belly Map Chest\",\n    \"Shadow Temple Map Chest\",\n    \"Spirit Temple Map Chest\",\n    \"Water Temple Map Chest\",\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let OcarinaLocationPool: LocationPoolType = [\n    \"Gift from Saria\",\n    \"Ocarina of Time\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let RutoLetterLocationPool: LocationPoolType = [\n    \"Underwater Bottle\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let ShopLocationPool: LocationPoolType = [\n    \"Kokiri Shop Item 1\",\n    \"Kokiri Shop Item 2\",\n    \"Kokiri Shop Item 3\",\n    \"Kokiri Shop Item 4\",\n    \"Kokiri Shop Item 5\",\n    \"Kokiri Shop Item 6\",\n    \"Kokiri Shop Item 7\",\n    \"Kokiri Shop Item 8\",\n    \"Castle Town Bazaar Item 1\",\n    \"Castle Town Bazaar Item 2\",\n    \"Castle Town Bazaar Item 3\",\n    \"Castle Town Bazaar Item 4\",\n    \"Castle Town Bazaar Item 5\",\n    \"Castle Town Bazaar Item 6\",\n    \"Castle Town Bazaar Item 7\",\n    \"Castle Town Bazaar Item 8\",\n    \"Castle Town Potion Shop Item 1\",\n    \"Castle Town Potion Shop Item 2\",\n    \"Castle Town Potion Shop Item 3\",\n    \"Castle Town Potion Shop Item 4\",\n    \"Castle Town Potion Shop Item 5\",\n    \"Castle Town Potion Shop Item 6\",\n    \"Castle Town Potion Shop Item 7\",\n    \"Castle Town Potion Shop Item 8\",\n    \"Bombchu Shop Item 1\",\n    \"Bombchu Shop Item 2\",\n    \"Bombchu Shop Item 3\",\n    \"Bombchu Shop Item 4\",\n    \"Bombchu Shop Item 5\",\n    \"Bombchu Shop Item 6\",\n    \"Bombchu Shop Item 7\",\n    \"Bombchu Shop Item 8\",\n    \"Kakariko Bazaar Item 1\",\n    \"Kakariko Bazaar Item 2\",\n    \"Kakariko Bazaar Item 3\",\n    \"Kakariko Bazaar Item 4\",\n    \"Kakariko Bazaar Item 5\",\n    \"Kakariko Bazaar Item 6\",\n    \"Kakariko Bazaar Item 7\",\n    \"Kakariko Bazaar Item 8\",\n    \"Kakariko Potion Shop Item 1\",\n    \"Kakariko Potion Shop Item 2\",\n    \"Kakariko Potion Shop Item 3\",\n    \"Kakariko Potion Shop Item 4\",\n    \"Kakariko Potion Shop Item 5\",\n    \"Kakariko Potion Shop Item 6\",\n    \"Kakariko Potion Shop Item 7\",\n    \"Kakariko Potion Shop Item 8\",\n    \"Goron Shop Item 1\",\n    \"Goron Shop Item 2\",\n    \"Goron Shop Item 3\",\n    \"Goron Shop Item 4\",\n    \"Goron Shop Item 5\",\n    \"Goron Shop Item 6\",\n    \"Goron Shop Item 7\",\n    \"Goron Shop Item 8\",\n    \"Zora Shop Item 1\",\n    \"Zora Shop Item 2\",\n    \"Zora Shop Item 3\",\n    \"Zora Shop Item 4\",\n    \"Zora Shop Item 5\",\n    \"Zora Shop Item 6\",\n    \"Zora Shop Item 7\",\n    \"Zora Shop Item 8\",\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let SmallKeyLocationPool: LocationPoolType = [\n    \"Forest Temple First Chest\",\n    \"Forest Temple Chest Behind Lobby\",\n    \"Forest Temple Well Chest\",\n    \"Forest Temple Floormaster Chest\",\n    \"Forest Temple Red Poe Chest\",\n    \"Bottom of the Well Front Left Hidden Wall\",\n    \"Bottom of the Well Right Bottom Hidden Wall\",\n    \"Bottom of the Well Freestanding Key\",\n    \"Fire Temple Chest Near Boss\",\n    \"Fire Temple Big Lava Room Open Chest\",\n    \"Fire Temple Big Lava Room Bombable Chest\",\n    \"Fire Temple Boulder Maze Lower Chest\",\n    \"Fire Temple Boulder Maze Upper Chest\",\n    \"Fire Temple Boulder Maze Side Room\",\n    \"Fire Temple Boulder Maze Bombable Pit\",\n    \"Fire Temple Highest Goron Chest\",\n    \"Water Temple Torches Chest\",\n    \"Water Temple Central Bow Target Chest\",\n    \"Water Temple Cracked Wall Chest\",\n    \"Water Temple Dragon Chest\",\n    \"Water Temple Central Pillar Chest\",\n    \"Water Temple River Chest\",\n    \"Shadow Temple Early Silver Rupee Chest\",\n    \"Shadow Temple Falling Spikes Upper Chest\",\n    \"Shadow Temple Freestanding Key\",\n    \"Shadow Temple After Wind Hidden Chest\",\n    \"Shadow Temple Hidden Floormaster Chest\",\n    \"Gerudo Training Grounds Stalfos Chest\",\n    \"Gerudo Training Grounds Beamos Chest\",\n    \"Gerudo Training Grounds Hidden Ceiling Chest\",\n    \"Gerudo Training Grounds Freestanding Key\",\n    \"Gerudo Training Grounds Underwater Silver Rupee Chest\",\n    \"Gerudo Training Grounds Hammer Room Switch Chest\",\n    \"Gerudo Training Grounds Eye Statue Chest\",\n    \"Gerudo Training Grounds Near Scarecrow Chest\",\n    \"Gerudo Training Grounds Heavy Block Third Chest\",\n    \"Spirit Temple Child Right Chest\",\n    \"Spirit Temple Early Adult Right Chest\",\n    \"Spirit Temple Sun Block Room Chest\",\n    \"Spirit Temple Statue Hand Chest\",\n    \"Spirit Temple Near Four Armos Chest\",\n    \"Ganons Castle Light Trial Invisible Enemies Chest\",\n    \"Ganons Castle Light Trial Lullaby Chest\",\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let SongLocationPool: LocationPoolType = [\n    \"Song from Saria\",\n    \"Sheik Forest Song\",\n    \"Song from Ocarina of Time\",\n    \"Sheik at Colossus\",\n    \"Sheik at Temple\",\n    \"Impa at Castle\",\n    \"Sheik in Kakariko\",\n    \"Song at Windmill\",\n    \"Song from Composer Grave\",\n    \"Sheik in Crater\",\n    \"Song from Malon\",\n    \"Sheik in Ice Cavern\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let SwordLocationPool: LocationPoolType = [\n    \"Kokiri Sword Chest\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let WeirdEggLocationPool: LocationPoolType = [\n    \"Malon Egg\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let BossKeyItemPool: ItemPoolType = [\n    \"Boss Key (Fire Temple)\",\n    \"Boss Key (Forest Temple)\",\n    \"Boss Key (Shadow Temple)\",\n    \"Boss Key (Spirit Temple)\",\n    \"Boss Key (Water Temple)\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let CompassItemPool: ItemPoolType = [\n    \"Compass (Bottom of the Well)\",\n    \"Compass (Deku Tree)\",\n    \"Compass (Dodongos Cavern)\",\n    \"Compass (Fire Temple)\",\n    \"Compass (Forest Temple)\",\n    \"Compass (Ice Cavern)\",\n    \"Compass (Jabu Jabus Belly)\",\n    \"Compass (Shadow Temple)\",\n    \"Compass (Spirit Temple)\",\n    \"Compass (Water Temple)\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let GanonsBossKeyItemPool: ItemPoolType = [\n    \"Boss Key (Ganons Castle)\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let GerudoCardItemPool: ItemPoolType = [\n    \"Gerudo Membership Card\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let GoldSkulltulaItemPool: ItemPoolType = [\n    \"Gold Skulltula Token\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let MagicBeanItemPool: ItemPoolType = [\n    \"Magic Bean Pack\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let MapItemPool: ItemPoolType = [\n    \"Map (Bottom of the Well)\",\n    \"Map (Deku Tree)\",\n    \"Map (Dodongos Cavern)\",\n    \"Map (Fire Temple)\",\n    \"Map (Forest Temple)\",\n    \"Map (Ice Cavern)\",\n    \"Map (Jabu Jabus Belly)\",\n    \"Map (Shadow Temple)\",\n    \"Map (Spirit Temple)\",\n    \"Map (Water Temple)\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let OcarinaItemPool: ItemPoolType = [\n    \"Ocarina\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let RutoLetterItemPool: ItemPoolType = [\n    \"Bottle with Letter\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let SmallKeyItemPool: ItemPoolType = [\n    \"Small Key (Bottom of the Well)\",\n    \"Small Key (Fire Temple)\",\n    \"Small Key (Forest Temple)\",\n    \"Small Key (Ganons Castle)\",\n    \"Small Key (Gerudo Fortress)\",\n    \"Small Key (Gerudo Training Grounds)\",\n    \"Small Key (Shadow Temple)\",\n    \"Small Key (Spirit Temple)\",\n    \"Small Key (Water Temple)\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let SongItemPool: ItemPoolType = [\n    \"Bolero of Fire\",\n    \"Eponas Song\",\n    \"Minuet of Forest\",\n    \"Nocturne of Shadow\",\n    \"Prelude of Light\",\n    \"Requiem of Spirit\",\n    \"Sarias Song\",\n    \"Serenade of Water\",\n    \"Song of Storms\",\n    \"Song of Time\",\n    \"Suns Song\",\n    \"Zeldas Lullaby\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let SwordItemPool: ItemPoolType = [\n    \"Kokiri Sword\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let VanillaItemPool: ItemPoolType = [\n    \"Arrows (10)\",\n    \"Arrows (30)\",\n    \"Arrows (5)\",\n    \"Biggoron Sword\",\n    \"Bomb Bag\",\n    \"Bombchus\",\n    \"Bombchus (10)\",\n    \"Bombchus (20)\",\n    \"Bombchus (5)\",\n    \"Bombs (10)\",\n    \"Bombs (20)\",\n    \"Bombs (5)\",\n    \"Boomerang\",\n    \"Bottle\",\n    \"Bottle with Red Potion\",\n    \"Bottle with Blue Potion\",\n    \"Bottle with Fairy\",\n    \"Bottle with Fish\",\n    \"Bottle with Blue Fire\",\n    \"Bottle with Bugs\",\n    \"Bottle with Big Poe\",\n    \"Bottle with Green Potion\",\n    \"Bottle with Milk\",\n    \"Bottle with Poe\",\n    \"Bow\",\n    \"Broken Sword\",\n    \"Buy Arrows (10)\",\n    \"Buy Arrows (30)\",\n    \"Buy Arrows (50)\",\n    \"Buy Blue Fire\",\n    \"Buy Blue Potion\",\n    \"Buy Bombchu (10)\",\n    \"Buy Bombchu (20)\",\n    \"Buy Bombchu (5)\",\n    \"Buy Bombs (10)\",\n    \"Buy Bombs (20)\",\n    \"Buy Bombs (5) [25]\",\n    \"Buy Bombs (5) [35]\",\n    \"Buy Bottle Bug\",\n    \"Buy Deku Nut (10)\",\n    \"Buy Deku Nut (5)\",\n    \"Buy Deku Seeds (30)\",\n    \"Buy Deku Shield\",\n    \"Buy Deku Stick (1)\",\n    \"Buy Fairy's Spirit\",\n    \"Buy Fish\",\n    \"Buy Goron Tunic\",\n    \"Buy Green Potion\",\n    \"Buy Heart\",\n    \"Buy Hylian Shield\",\n    \"Buy Poe\",\n    \"Buy Red Potion [30]\",\n    \"Buy Red Potion [40]\",\n    \"Buy Red Potion [50]\",\n    \"Buy Zora Tunic\",\n    \"Claim Check\",\n    \"Cojiro\",\n    \"Deku Nut Capacity\",\n    \"Deku Nuts (10)\",\n    \"Deku Nuts (5)\",\n    \"Deku Seeds (30)\",\n    \"Deku Shield\",\n    \"Deku Stick (1)\",\n    \"Deku Stick Capacity\",\n    \"Dins Fire\",\n    \"Double Defense\",\n    \"Eyeball Frog\",\n    \"Eyedrops\",\n    \"Farores Wind\",\n    \"Fire Arrows\",\n    \"Goron Tunic\",\n    \"Hammer\",\n    \"Heart Container\",\n    \"Hover Boots\",\n    \"Hylian Shield\",\n    \"Ice Arrows\",\n    \"Ice Trap\",\n    \"Iron Boots\",\n    \"Lens of Truth\",\n    \"Light Arrows\",\n    \"Magic Meter\",\n    \"Mirror Shield\",\n    \"Nayrus Love\",\n    \"Odd Mushroom\",\n    \"Odd Potion\",\n    \"Piece of Heart (Treasure Chest Game)\",\n    \"Piece of Heart\",\n    \"Poachers Saw\",\n    \"Pocket Cucco\",\n    \"Pocket Egg\",\n    \"Prescription\",\n    \"Progressive Hookshot\",\n    \"Progressive Scale\",\n    \"Progressive Strength Upgrade\",\n    \"Progressive Wallet\",\n    \"Recovery Heart\",\n    \"Rupee (1)\",\n    \"Rupees (20)\",\n    \"Rupees (200)\",\n    \"Rupees (5)\",\n    \"Rupees (50)\",\n    \"Slingshot\",\n    \"Stone of Agony\",\n    \"Zora Tunic\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let WeirdEggItemPool: ItemPoolType = [\n    \"Weird Egg\"\n];\n","import { LocationPoolType } from \"../Types/LocationPoolType\";\n\nexport let DungeonRewardLocationPool: LocationPoolType = [\n    \"Barinade\",\n    \"Bongo Bongo\",\n    \"King Dodongo\",\n    \"Links Pocket\",\n    \"Morpha\",\n    \"Phantom Ganon\",\n    \"Queen Gohma\",\n    \"Twinrova\",\n    \"Volvagia\"\n];\n","import { ItemPoolType } from \"../Types/ItemPoolType\";\n\nexport let DungeonRewardItemPool: ItemPoolType = [\n    \"Fire Medallion\",\n    \"Forest Medallion\",\n    \"Goron Ruby\",\n    \"Kokiri Emerald\",\n    \"Light Medallion\",\n    \"Shadow Medallion\",\n    \"Spirit Medallion\",\n    \"Water Medallion\",\n    \"Zora Sapphire\"\n];\n","import { SelectOptionType } from \"./Types/SelectOptionType\";\nimport LocationPoolDisplay from \"./LocationPoolDisplay\";\nimport { Settings } from \"./Settings/Settings\";\nimport React, { useState } from \"react\";\nimport \"./PlandoGenerator.css\";\n\n// location pools\nimport { BossKeyLocationPool } from \"./ItemLocations/BossKeyLocationPool\";\nimport { CompassLocationPool } from \"./ItemLocations/CompassLocationPool\";\nimport { CowLocationPool } from \"./ItemLocations/CowLocationPool\";\nimport { DekuScrubLocationPool } from \"./ItemLocations/DekuScrubLocationPool\";\nimport { DungeonLocationPool } from \"./ItemLocations/DungeonLocationPool\";\nimport { GanonsBossKeyLocationPool } from \"./ItemLocations/GanonsBossKeyLocationPool\";\nimport { GerudoCardLocationPool } from \"./ItemLocations/GerudoCardLocationPool\";\nimport { GoldSkulltulaDungeonLocationPool } from \"./ItemLocations/GoldSkulltulaDungeonLocationPool\";\nimport { GoldSkulltulaOverworldLocationPool } from \"./ItemLocations/GoldSkulltulaOverworldLocationPool\";\nimport { LocationPool } from \"./ItemLocations/LocationPool\";\nimport { MagicBeanLocationPool } from \"./ItemLocations/MagicBeanLocationPool\";\nimport { MapLocationPool } from \"./ItemLocations/MapLocationPool\";\nimport { OcarinaLocationPool } from \"./ItemLocations/OcarinaLocationPool\";\nimport { RutoLetterLocationPool } from \"./ItemLocations/RutoLetterLocationPool\";\nimport { ShopLocationPool } from \"./ItemLocations/ShopLocationPool\";\nimport { SmallKeyLocationPool } from \"./ItemLocations/SmallKeyLocationPool\";\nimport { SongLocationPool } from \"./ItemLocations/SongLocationPool\";\nimport { SwordLocationPool } from \"./ItemLocations/SwordLocationPool\";\nimport { WeirdEggLocationPool } from \"./ItemLocations/WeirdEggLocationPool\";\n// item pools\nimport { BossKeyItemPool } from \"./ItemPools/BossKeyItemPool\";\nimport { CompassItemPool } from \"./ItemPools/CompassItemPool\";\nimport { GanonsBossKeyItemPool } from \"./ItemPools/GanonsBossKeyItemPool\";\nimport { GerudoCardItemPool } from \"./ItemPools/GerudoCardItemPool\";\nimport { GoldSkulltulaItemPool } from \"./ItemPools/GoldSkulltulaItemPool\";\nimport { MagicBeanItemPool } from \"./ItemPools/MagicBeanItemPool\";\nimport { MapItemPool } from \"./ItemPools/MapItemPool\";\nimport { OcarinaItemPool } from \"./ItemPools/OcarinaItemPool\";\nimport { RutoLetterItemPool } from \"./ItemPools/RutoLetterItemPool\";\nimport { SmallKeyItemPool } from \"./ItemPools/SmallKeyItemPool\";\nimport { SongItemPool } from \"./ItemPools/SongItemPool\";\nimport { SwordItemPool } from \"./ItemPools/SwordItemPool\";\nimport { VanillaItemPool } from \"./ItemPools/VanillaItemPool\";\nimport { WeirdEggItemPool } from \"./ItemPools/WeirdEggItemPool\";\n// dungeon rewards\nimport { DungeonRewardLocationPool } from \"./DungeonRewards/DungeonRewardLocationPool\";\nimport { DungeonRewardItemPool } from \"./DungeonRewards/DungeonRewardItemPool\";\n\nfunction PlandoGenerator() {\n\n    const [settings, setSettings]: [{[s: string]: boolean | string }, Function] = useState({});\n    const [locations, setLocations]: [{[l: string]: string}, Function] = useState({});\n\n    // functions\n    const toggleSettingEnabled = (name: string): void => {\n        let _settings = settings;\n        let defaultValue;\n        if ((Settings[name] as SelectOptionType).options !== undefined) {\n              defaultValue = (Settings[name] as SelectOptionType).options[0];\n        } else {\n            defaultValue = false;\n        }\n        _settings[name] !== undefined ? delete _settings[name] : _settings[name] = defaultValue;\n        setSettings({..._settings});\n    };\n\n    const updateSetting = (name: string, value: string) => {\n        let _settings = settings;\n        _settings[name] = value === \"true\" ? true : value === \"false\" ? false : value;\n        setSettings({..._settings});\n    };\n\n    const toggleLocationEnabled = (location: string) => {\n        let _locations = locations;\n        _locations[location] !== undefined ? delete _locations[location] : _locations[location] = VanillaItemPool[0];\n        setLocations({..._locations});\n    };\n\n    const toggleDungeonRewardEnabled = (location: string) => {\n        let _locations = locations;\n        _locations[location] !== undefined ? delete _locations[location] : _locations[location] = DungeonRewardItemPool[0];\n        setLocations({..._locations});\n    };\n\n    const updateLocation = (location: string, value: string) => {\n        let _locations = locations;\n        _locations[location] = value;\n        setLocations({..._locations});\n    };\n\n    const saveJSONFile = () => {\n        let a = document.createElement(\"a\");\n        let contents = {\n            \"settings\": {\n                ...settings\n            },\n            \"locations\": {\n                ...locations\n            }\n        };\n        let file = new Blob([JSON.stringify(contents)], {type: \"text/plain\"});\n        a.href = URL.createObjectURL(file);\n        a.download = `plando-${Date.now()}.json`;\n        a.click();\n        URL.revokeObjectURL(a.href);\n    };\n\n    // locations\n    let overworldLocations = [...LocationPool];\n    let dungeonLocations = [...DungeonLocationPool];\n    let gsLocations = [];\n    let shopLocations = [];\n    let dekuScrubLocations = [];\n\n    // items\n    let overworldItems: string[] = [...VanillaItemPool];\n    let dungeonItems: string[] = [...VanillaItemPool];\n    let songItems: string[] = [];\n    let gsItems: string[] = [];\n\n    // populate options\n    if (!settings.open_fountain) {\n        overworldLocations.push(...RutoLetterLocationPool);\n        overworldItems.push(...RutoLetterItemPool);\n        dungeonItems.push(...RutoLetterItemPool);\n    }\n\n    if (settings.shuffle_kokiri_sword) {\n        overworldLocations.push(...SwordLocationPool);\n        overworldItems.push(...SwordItemPool);\n        dungeonItems.push(...SwordItemPool);\n    }\n\n    if (settings.shuffle_ocarinas) {\n        overworldLocations.push(...OcarinaLocationPool);\n        overworldItems.push(...OcarinaItemPool);\n        dungeonItems.push(...OcarinaItemPool);\n    }\n\n    if (settings.shuffle_weird_egg) {\n        overworldLocations.push(...WeirdEggLocationPool);\n        overworldItems.push(...WeirdEggItemPool);\n        dungeonItems.push(...WeirdEggItemPool);\n    }\n\n    if (settings.shuffle_gerudo_card) {\n        overworldLocations.push(...GerudoCardLocationPool);\n        overworldItems.push(...GerudoCardItemPool);\n        dungeonItems.push(...GerudoCardItemPool);\n    }\n\n    if (settings.shuffle_cows) {\n        overworldLocations.push(...CowLocationPool);\n    }\n\n    if (settings.shuffle_beans) {\n        overworldLocations.push(...MagicBeanLocationPool);\n        overworldItems.push(...MagicBeanItemPool);\n        dungeonItems.push(...MagicBeanItemPool);\n    }\n\n    if (settings.tokensanity) {\n        if (settings.tokensanity === \"dungeons\" || settings.tokensanity === \"all\") {\n            dungeonItems.push(...GoldSkulltulaItemPool);\n            gsLocations.push(...GoldSkulltulaDungeonLocationPool);\n            gsItems.push(...dungeonItems);\n        }\n        if (settings.tokensanity === \"overworld\" || settings.tokensanity === \"all\") {\n            overworldItems.push(...GoldSkulltulaItemPool);\n            gsLocations.push(...GoldSkulltulaOverworldLocationPool);\n            gsItems.push(...overworldItems);\n        }\n        gsItems = gsItems.filter((v, i, a) => a.indexOf(v) === i);\n    }\n\n    if (settings.shuffle_mapcompass) {\n        if (settings.shuffle_mapcompass === \"dungeon\" || settings.shuffle_mapcompass === \"keysanity\") {\n            dungeonLocations.push(...MapLocationPool, ...CompassLocationPool);\n            dungeonItems.push(...MapItemPool, ...CompassItemPool);\n        }\n        if (settings.shuffle_mapcompass === \"keysanity\") {\n            overworldItems.push(...MapItemPool, ...CompassItemPool);\n        }\n    }\n\n    if (settings.shuffle_smallkeys) {\n        if (settings.shuffle_smallkeys === \"dungeon\" || settings.shuffle_smallkeys === \"keysanity\") {\n            dungeonLocations.push(...SmallKeyLocationPool);\n            dungeonItems.push(...SmallKeyItemPool);\n        }\n        if (settings.shuffle_smallkeys === \"keysanity\") {\n            overworldItems.push(...SmallKeyItemPool);\n        }\n    }\n\n    if (settings.shuffle_bosskeys) {\n        if (settings.shuffle_bosskeys === \"dungeon\" || settings.shuffle_bosskeys === \"keysanity\") {\n            dungeonLocations.push(...BossKeyLocationPool);\n            dungeonItems.push(...BossKeyItemPool);\n        }\n        if (settings.shuffle_bosskeys === \"keysanity\") {\n            overworldItems.push(...BossKeyItemPool);\n        }\n    }\n\n    if (settings.shuffle_ganon_bosskey) {\n        if (settings.shuffle_ganon_bosskey === \"dungeon\" || settings.shuffle_ganon_bosskey === \"keysanity\") {\n            dungeonLocations.push(...GanonsBossKeyLocationPool);\n            dungeonItems.push(...GanonsBossKeyItemPool);\n        }\n        if (settings.shuffle_ganon_bosskey === \"keysanity\") {\n            overworldItems.push(...GanonsBossKeyItemPool);\n        }\n    }\n\n    if (settings.shopsanity) {\n        if (settings.shopsanity !== \"off\" && settings.shopsanity !== \"0\") {\n            shopLocations.push(...ShopLocationPool);\n        }\n    }\n\n    if (settings.shuffle_scrubs) {\n        if (settings.shuffle_scrubs !== \"off\") {\n            dekuScrubLocations.push(...DekuScrubLocationPool);\n        }\n    }\n\n    if (settings.shuffle_song_items) {\n        overworldItems.push(...SongItemPool);\n        dungeonItems.push(...SongItemPool);\n        songItems.push(...overworldItems);\n    } else {\n        songItems.push(...SongItemPool);\n    }\n\n    // populate settings section\n    let settingsJsx: JSX.Element[] = [];\n    Object.keys(Settings).sort().forEach((name, i) => {\n        let settingEnabled = settings[name] !== undefined;\n        let options: JSX.Element[];\n        let arr = (Settings[name] as SelectOptionType).options !== undefined ? (Settings[name] as SelectOptionType).options : [\"false\", \"true\"];\n        options = arr.map((option: string, j: number) => {\n            return <option key={j} value={option}>\n                {option}\n            </option>\n        });\n        settingsJsx.push(<div key={i} className=\"setting\">\n            <h5 onClick={() => toggleSettingEnabled(name)} className={(settingEnabled ? \"enabled\" : \"disabled\")}>\n                {Settings[name].display ? Settings[name].display : name}\n            </h5>\n            {settingEnabled && <div className=\"\">\n                <div className=\"select is-small setting-select\">\n                    <select onChange={e => updateSetting(name, e.target.value)} defaultValue={settings[name].toString()}>\n                        {options}\n                    </select>\n                </div>\n            </div>}\n        </div>);\n    });\n\n    // map over location keys to check for removed locations\n    let updated = false;\n    let _locations = {...locations};\n    let possibleLocations = [\n        ...overworldLocations,\n        ...dungeonLocations,\n        ...gsLocations,\n        ...shopLocations,\n        ...dekuScrubLocations,\n        ...DungeonRewardLocationPool,\n        ...SongLocationPool\n    ];\n    Object.keys(_locations).forEach(location => {\n        if (!possibleLocations.includes(location)) {\n            delete _locations[location];\n            updated = true;\n        }\n    });\n    if (updated) {\n        setLocations({..._locations});\n    }\n\n    return (\n        <div className=\"plando-generator\">\n            {/* top bar for outputting plando file */}\n            <nav className=\"navbar is-dark is-fixed-top\">\n                <div className=\"navbar-brand  is-pulled-right\">\n                    <a href=\"#download\" className=\"navbar-item is-button\" onClick={saveJSONFile}>\n                        Download Plando\n                    </a>\n                </div>\n            </nav>\n            {/* Settings that influence what options are populated */}\n            <div style={{height: \"50px\"}} />\n            <div className=\"plando-settings section\">\n                <h3 className=\"is-size-3\">Settings</h3>\n                <h4 className=\"is-size-4\">Click setting name to enable/disable</h4>\n                <div className=\"settings\">\n                    {settingsJsx}\n                </div>\n            </div>\n\n            {/* locations that are open based on settings */}\n            <div className=\"plando-locations section\">\n                <h3 className=\"is-size-3\">Locations</h3>\n                <h4 className=\"is-size-4\">Click locations to enable/disable</h4>\n                {/* cows */}\n                <LocationPoolDisplay\n                    name={\"Cow Locations\"}\n                    availableLocations={settings.shuffle_cows ? CowLocationPool : []}\n                    items={overworldItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* dungeons */}\n                <LocationPoolDisplay\n                    name={\"Dungeon Locations\"}\n                    availableLocations={dungeonLocations}\n                    items={dungeonItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* dungeon rewards */}\n                <LocationPoolDisplay\n                    name={\"Dungeon Rewards\"}\n                    availableLocations={DungeonRewardLocationPool}\n                    items={DungeonRewardItemPool.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleDungeonRewardEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* overworld */}\n                <LocationPoolDisplay\n                    name={\"Overworld Locations\"}\n                    availableLocations={overworldLocations}\n                    items={overworldItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* scrubs */}\n                <LocationPoolDisplay\n                    name={\"Scrub Locations\"}\n                    availableLocations={dekuScrubLocations}\n                    items={overworldItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* shops */}\n                <LocationPoolDisplay\n                    name={\"Shop Locations\"}\n                    availableLocations={shopLocations}\n                    items={overworldItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* skulltulas */}\n                <LocationPoolDisplay\n                    name={\"Skulltula Locations\"}\n                    availableLocations={gsLocations}\n                    items={gsItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n                {/* songs */}\n                <LocationPoolDisplay\n                    name={\"Song Locations\"}\n                    availableLocations={SongLocationPool}\n                    items={songItems.sort()}\n                    locations={locations}\n                    toggleLocationEnabled={toggleLocationEnabled}\n                    updateLocation={updateLocation}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default PlandoGenerator;\n","import * as serviceWorker from './serviceWorker';\nimport PlandoGenerator from './PlandoGenerator';\nimport ReactDOM from 'react-dom';\nimport \"bulma/css/bulma.css\"\nimport React from 'react';\nimport './index.css';\n\nReactDOM.render(<PlandoGenerator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}